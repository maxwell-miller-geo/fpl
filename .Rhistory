library(devtools)
load_all()
install("fpl")
install()
library(fpl)
data <- fpl::filter_players(get_current_stats())
data
fpl_plot(data, pos = "FWD")
players <- players[players$minutes > 200, ]
players <- data.table::data.table(spreadsheet)
class(players)
if (!is.null(pos)) {
players <- players[position == pos]
if (!is.null(top_percent)) {
top_players <- stats::quantile(players$total_points,
top_percent)
players <- players[players$total_points >= top_players]
}
}
uninstall("fpl")
uninstall()
load_all()
fpl_plot(data, pos = "FWD")
players <- data.table::data.table(spreadsheet)
class(players)
!is.null(pos)
players <- players[position == pos]
class(spreadsheet)
load_all()
fpl_plot(data, pos = "FWD")
load_all()
fpl_plot(data, pos = "FWD")
class(players)
!is.null(pos)
players <- players[position == pos]
use_r("zzz")
load_all()
fpl_plot(data, pos = "FWD")
players <- players[position == pos]
players
library(data.table)
load_all()
fpl_plot(data, pos = "FWD")
players <- players[position == pos]
players <- data.table::data.table(spreadsheet)
players
?data.table
get(pos)
players <- players[position == get(pos)]
pos
players$position
players <- players[position == pos]
class(players$position)
players <- data.table::data.table(spreadsheet)
class(players$position)
class(pos)
players <- players[,position := pos]
vignette('datatable-importing')
import(data.table)
check()
library(data.table)
players <- data
class(players)
players <- players[position == pos]
players <- as.data.table(players)
players <- players[position == pos]
pos <- "FWD"
players <- players[position == pos]
class(players)
document()
load_all()
library(devtools)
load_all()
data <- filter_players(get_current_stats())
fpl_plot(data, pos ="FWD")
players <- players[position == pos]
load_all()
fpl_plot(data, pos ="FWD")
load_all()
fpl_plot(data, pos ="FWD")
load_all()
fpl_plot(data, pos ="FWD")
fpl_plot(data, pos ="FWD", group = "images")
fpl_plot(data, pos ="FWD", group = "photos")
load_all()
fpl_plot(data, pos ="FWD", group = "photos")
load_all()
fpl_plot(data, pos ="FWD", group = "photos")
?ggimage
?geom_image
load_all()
fpl_plot(data, pos ="FWD", group = "photos")
# Caption variations
caption <- paste0("Correlation coefficient (R\u00B2): ", rsquared)
caption2 <- paste(beautify(col2)," =", round(slope,2), "*",beautify(col1))
factors == "photos")
factors == "photos"
p <- ggplot2::ggplot(players, mapping = ggplot2::aes(x = get(col1), y = get(col2))) +
ggplot2::geom_abline(intercept = coeff$coefficients[[1]], slope = slope, col = "black") +
ggimage::geom_image(ggplot2::aes(image = photo_paths), size = 0.05)+
ggplot2::labs(x = beautify(col1), y = beautify(col2), title = paste0("FPL Players by Team: ", pos,"s")) +
ggplot2::theme(plot.title = ggplot2::element_text(hjust = 0.5), panel.background = ggplot2::element_rect(fill = "grey", color = "grey80")) +
ggplot2::annotate("text", x = range(x1)[2]*.88, y = ylimit*1, label = caption, size = 3) +
ggplot2::annotate("text", x = range(x1)[2]*.88, y = ylimit*1.26, label = caption2, size = 3)+
ggplot2::scale_color_viridis_d(option = "turbo")
#theme_update(panel.background = element_rect(fill = "grey", colour = "grey50"))
#p + ggplot2::geom_smooth(method = "lm", se = F)
if(!is.null(xrange)){
p <- p + ggplot2::scale_x_continuous(limits = xrange)
}
p
load_all()
load_all()
remove_player <- ""
!is.null(remove_player)
length(remove_player)
remove_player   <- NULL
!is.null(remove_player)
remove_player <- "Haaland"
remove_player
players <- players[players$name != remove_player]
players <- data.table(data)
players <- players[players$name != remove_player]
document()
load_all()
use_version()
document()
use_version()
check()
use_version()
load_all()
document()
fpl_plot(data, pos = "FWD", remove_player = "Haaland")
data$form
fpl_plot(data, y = "form",pos = "FWD", remove_player = "Haaland")
data
colnames(data)
fpl_plot(data, y = "expected_goal_involvements", pos = "FWD")
fpl_plot(data, y = "expected_goal_involvements_per", pos = "FWD")
data[name = "Ings"]
data$name
data[data$name = "Ings"]
data[data$name == "Ings"]
use_r("player_analysis")
name <- "Ings"
class(data)
player <- data[data$name == "Ings"]
player <- data[data$name == "Ings",]
player
load_all()
player(data, "Haaland")
player <- data[data$name == name,subset]
subset <- c("name","team","chance_of_playing_this_round", "form", "points_per_game",
"first_name", "selected_by_percent", "total_points",
"value_form", "minutes", "goals_scored", "assists",
"expected_goals_per_90", "expected_assists_per_90", "cost",
"starts_per_90", "position")
player <- data[data$name == name,subset]
player
length(subset)
load_all()
fpl::get_current_stats()
load_all()
document()
load_all()
statlist <- get_premier_stats()
statlist
events <- statlist$events
events
statlist$teams
statlist$element_stats
statlist$element_types
statlist$chips
statlist$phases
statlist$game_settings
statlist$game_config
statlist$game_config$scoring
statlist$events
# API Page
url <- "https://fantasy.premierleague.com/api/fixtures/"
response <- httr::GET(url, httr::add_headers("user-agent" = "Mozilla/5.0"))
data <- jsonlite::fromJSON(httr::content(response, as = "text",encoding = "UTF-8"))
data
names(data)
data$team_a
data$id
data$team_h
data$team_h_difficulty
players
document()
?get_fixture_data
load_all()
players$position
data
data$stats
library(data.table)
statlist$game_settings
stats <- get_premier_stats()
stats
game_settings <- get_premier_stats()$game_settings
game_settings
game_settings <- get_premier_stats()
game_settings <- get_premier_stats()
game_settings
game_settings <- get_premier_stats()
game_settings
game_settings$game_config
game_settings <- get_premier_stats()$game_config
game_settings
game_settings <- get_premier_stats()$game_config$scoring
game_settings <- get_premier_stats()$game_config$scoring
game_settings
players
class(players)
players$position
game_settings
data <- game_settings
# Initialize a data.table with the positions
positions <- c("GKP", "DEF", "MID", "FWD")
result <- data.table(position = positions)
# Iterate over the list and add columns
for (name in names(data)) {
item <- data[[name]]
if (is.list(item)) {
# If the item is a list (e.g., goals_conceded), extract values by position
result[, (name) := sapply(positions, function(pos) item[[pos]] %||% NA)]
} else {
# If the item is a scalar, repeat it for all positions
result[, (name) := item]
}
}
result
# Initialize a data.table with the positions
positions <- c("GKP", "DEF", "MID", "FWD")
result <- data.table(position = positions)
# Iterate over the list and add columns
for (name in names(data)) {
item <- data[[name]]
if (is.list(item)) {
# If the item is a list (e.g., goals_conceded), extract values by position
result[, (name) := sapply(positions, function(pos) item[[pos]] %||% NA)]
} else {
# If the item is a scalar, repeat it for all positions
result[, (name) := item]
}
}
result
print(result)
# Initialize a data.table with the positions
positions <- c("GKP", "DEF", "MID", "FWD")
point_breakdown <- data.table(position = positions)
# Iterate over the list and add columns
for (name in names(game_settings)) {
item <- game_settings[[name]]
if (is.list(item)) {
# If the item is a list (e.g., goals_conceded), extract values by position
point_breakdown[, (name) := sapply(positions, function(pos) item[[pos]] %||% NA)]
} else {
# If the item is a scalar, repeat it for all positions
point_breakdown[, (name) := item]
}
}
point_breakdown
print(point_breakdown)
class(point_breakdown)
names(game_settings)
name <- "goals_scored"
item <- game_settings[[name]]
item
is.list(item)
name
(name)
# If the item is a list (e.g., goals_conceded), extract values by position
point_breakdown[, (name) := sapply(positions, function(pos) {
if (!is.null(item[[pos]])) item[[pos]] else NA
})]
point_breakdown
load_all()
point_breakdown
load_all()
load_all()
point_breakdown
game_settings$goals_conceded
# Adjust goals conceded to points lost per goal
point_breakdown$goals_conceded <-  point_breakdown$goals_conceded*0.5
?merge
# Merge the two tables
players_w_points <- merge(players, point_breakdown, "position")
players_w_points
# Merge the two tables
players <- merge(players, point_breakdown, "position")
players$goals_scored.x
players
setnames(point_breakdown,
old = setdiff(names(point_breakdown), "position"),
new = paste0(setdiff(names(point_breakdown), "position"), "_points"))
point_breakdown
# Merge the two tables
players <- merge(players, point_breakdown, "position")
players
# Create expected offensive points per game
players[, expected_earned_points := expected_goals_per_90 * goals_scored_points +
expected_assists_per_90 * assists_points]
players$expected_earned_points
players$minutes
current_stats <- get_premier_stats()
current_stats
current_stats$game_settings
current_stats$events
events <- current_stats$events
events
events[events$finished]
events[events$finished,]
length(events[events$finished,])
nrow(events[events$finished,])
games_played <- nrow(events[events$finished,])
games_played
# Calculate minutes per game
players$minutes_per_game <- players$minutes / games_played
range(players$minutes_per_game)
players$minutes_per_game
median(players$minutes_per_game)
# Calculate minutes per game
players$minutes_per_game <- players$minutes / 20
median(players$minutes_per_game)
# Calculate minutes per game
players$minutes_per_game <- players$minutes / 22
median(players$minutes_per_game)
# Calculate minutes per game
players$minutes_per_game <- players$minutes / games_played
quantile(players$minutes, c(.25,.5,.75,.9,.99))
quantile(players$minutes_per_game, c(.25,.5,.75,.9,.99))
# Calculate minutes per game
players$minutes_per_game <- players$minutes / games_played
quantile(players$minutes_per_game, c(.25,.5,.75,.9,.99))
# Calculate minutes per game
players$minutes_per_game <- players$minutes / 20
quantile(players$minutes_per_game, c(.25,.5,.75,.9,.99))
# Calculate minutes per game
players$minutes_per_game <- players$minutes / 22
quantile(players$minutes_per_game, c(.25,.5,.75,.9,.99))
# Calculate minutes per game
players$minutes_per_game <- players$minutes / games_played
quantile(players$minutes_per_game, c(.25,.5,.75,.9,.99))
5/90
players$minutes_per_game
players[minutes_per_game > 90, minutes_per_game := 90]
# Create expected offensive points per game
players[, expected_earned_points := (expected_goals_per_90 * goals_scored_points +
expected_assists_per_90 * assists_points) * minutes_per_game]
players$expected_earned_points
# Create expected offensive points per game
players[, expected_earned_points := (expected_goals_per_90 * goals_scored_points +
expected_assists_per_90 * assists_points) / minutes_per_game]
# Create expected offensive points per game
players[, expected_earned_points := (expected_goals_per_90 * goals_scored_points +
expected_assists_per_90 * assists_points) / minutes_per_game]
players$expected_earned_points
# Create expected offensive points per game
players[, expected_earned_points := (expected_goals_per_90 * goals_scored_points +
expected_assists_per_90 * assists_points) * minutes_per_game /90]
players$expected_earned_points
# Create expected offensive points per game
players[, expected_goal_points := (expected_goals_per_90 * goals_scored_points +
expected_assists_per_90 * assists_points) * minutes_per_game /90]
?fifelse
# Column for attendance
players[, expected_play_time_points := fifelse(
minutes_played >= 60, 2, # 2 points for 60+ minutes
fifelse(minutes_played >= 5, 1, 0)# 1 point for 5+ minutes
)]
# Column for attendance
players[, expected_play_time_points := fifelse(
minutes_per_game >= 60, 2, # 2 points for 60+ minutes
fifelse(minutes_per_game >= 5, 1, 0)# 1 point for 5+ minutes
)]
players$expected_play_time_points
players$expected_goals_conceded
range(players$expected_goals_conceded)
players$saves_per_90
players$goals_conceded_per_90
players[5]
players[position = "FWD", expected_goals_conceded_per_90]
players[position == "FWD", expected_goals_conceded_per_90]
players[position == "MID", expected_goals_conceded_per_90]
players <- filter_players(get_premier_stats())
current_stats <- get_premier_stats()
events <- current_stats$events
games_played <- nrow(events[events$finished,]) # minimum games played
game_settings <- get_premier_stats()$game_config$scoring
# Initialize a data.table with the positions
positions <- c("GKP", "DEF", "MID", "FWD")
point_breakdown <- data.table(position = positions)
# Iterate over the list and add columns
for (name in names(game_settings)) {
item <- game_settings[[name]]
if (is.list(item)) {
# If the item is a list (e.g., goals_conceded), extract values by position
point_breakdown[, (name) := sapply(positions, function(pos) {
if (!is.null(item[[pos]])) item[[pos]] else NA })]
} else {
# If the item is a scalar, repeat it for all positions
point_breakdown[, (name) := item]
}
}
# Adjust goals conceded to points lost per goal
point_breakdown$goals_conceded <-  point_breakdown$goals_conceded*0.5
setnames(point_breakdown,
old = setdiff(names(point_breakdown), "position"),
new = paste0(setdiff(names(point_breakdown), "position"), "_points"))
# Calculate minutes per game
players$minutes_per_game <- players$minutes / games_played
players[minutes_per_game > 90, minutes_per_game := 90] # make sure players are below 90
players
class(players)
# Ensure players is data.table
players <- as.data.table(players)
players
class(data.tabl)
class(data.table)
class(players)
# Ensure players is data.table
players <- as.data.table(players)
# Initialize a data.table with the positions
positions <- c("GKP", "DEF", "MID", "FWD")
point_breakdown <- data.table(position = positions)
# Iterate over the list and add columns
for (name in names(game_settings)) {
item <- game_settings[[name]]
if (is.list(item)) {
# If the item is a list (e.g., goals_conceded), extract values by position
point_breakdown[, (name) := sapply(positions, function(pos) {
if (!is.null(item[[pos]])) item[[pos]] else NA })]
} else {
# If the item is a scalar, repeat it for all positions
point_breakdown[, (name) := item]
}
}
# Adjust goals conceded to points lost per goal
point_breakdown$goals_conceded <-  point_breakdown$goals_conceded*0.5
setnames(point_breakdown,
old = setdiff(names(point_breakdown), "position"),
new = paste0(setdiff(names(point_breakdown), "position"), "_points"))
# Calculate minutes per game
players$minutes_per_game <- players$minutes / games_played
players[minutes_per_game > 90, minutes_per_game := 90] # make sure players are below 90
# Merge the two tables
players <- merge(players, point_breakdown, "position")
# Create expected offensive points per game
players[, expected_goal_points := (expected_goals_per_90 * goals_scored_points +
expected_assists_per_90 * assists_points) * minutes_per_game /90]
# Column for minutes played
players[, expected_play_time_points := fifelse(
minutes_per_game >= 60, 2, # 2 points for 60+ minutes
fifelse(minutes_per_game >= 5, 1, 0)# 1 point for 5+ minutes
)]
yellow_cards_points
players$saves
players[saves > 0]
players[position == "GKP"]
players[position != "GKP", saves > 0]
players[position != "GKP"& saves > 0]
players[position != "GKP" & saves == 0]
# Column for defense - how to calculate clean sheets?
players[, expected_defensive_points := expected_goals_conceded_per_90 * goals_conceded_points + # conceded points
clean_sheets_per_90* clean_sheets_points + # points from clean sheets
yellow_cards/ games_played * yellow_cards_points +
red_cards/ games_played * red_cards_points +
saves_per_90 * saves_points/2
]
head(players$expected_defensive_points)
point_breakdown
#Determine expected points per game unweighted by opponent
players[ , expected_points_per_game := expected_goal_points + expected_play_time_points + expected_defensive_points]
players$expected_points_per_game
#Determine expected points per game unweighted by opponent
players[ , expected_points_per_game := round(expected_goal_points + expected_play_time_points + expected_defensive_points],2)
#Determine expected points per game unweighted by opponent
players[ , expected_points_per_game := round(expected_goal_points + expected_play_time_points + expected_defensive_points, 2)]
players$expected_points_per_game
load_all()
players <- filter_players(get_premier_stats())
updated_players <- expected_stats(players)
names(updated_players)
fpl_plot(updated_players, x = "cost", y = "expected_points_per_game", pos = "FWD")
updated_players$points_diff <- updated_players$points_per_game - updated_players$expected_points_per_game
fpl_plot(updated_players, x = "cost", y = "points_diff", pos = "FWD")
fpl_plot(updated_players, x = "cost", y = "points_diff", pos = "DEF")
fpl_plot(updated_players, x = "cost", y = "points_diff", pos = "MID")
fpl_plot(updated_players, x = "cost", y = "expected_points_per_game", pos = "MID")
fpl_plot(updated_players, x = "cost", y = "points_per_game", pos = "MID")
fpl_plot(updated_players, x = "cost", y = "expected_points", pos = "MID")
fpl_plot(updated_players, x = "cost", y = "points_per_game", pos = "MID")
fpl_plot(updated_players, x = "cost", y = "expected_defensive", pos = "DEF")
fpl_plot(updated_players, x = "cost", y = "expected_goal_points", pos = "MID")
fpl_plot(updated_players, x = "cost", y = "expected_goal_points", pos = "DEF")
fpl_plot(updated_players, x = "cost", y = "expected_goal_points", pos = "DEF", group = "images")
fpl_plot(updated_players, x = "cost", y = "expected_goal_points", pos = "DEF", group = "photos")
fpl_plot(updated_players, x = "cost", y = "expected_defensive", pos = "DEF", group = "photos")
